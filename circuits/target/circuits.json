{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"8750874257380288409","abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"_receipient","type":{"kind":"field"},"visibility":"public"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proofs","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"4958831594756391020":{"error_kind":"string","string":"nullifier was wrong"},"8298197817470868352":{"error_kind":"string","string":"merkle root was wring"}}},"bytecode":"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","debug_symbols":"pdfRbuowDAbgd+k1F7ETO8le5eho6liZKlUFdTDpCO3dT4DfMC5SMXplQ/FHmjhRe2zeu7fDx2s/brafzcufY/M29cPQf7wO23W777dj+fb4vWrs4+t+6rryVfPjeqnatVM37puX8TAMq+arHQ7nH33u2vEc9+1UrrpV043vJRZw0w/dKfte3apdvdQHK/b5Vi739TRTL4z6QHqrT3f1XK9nThkAe8c1wdcFIrUhECV5ZgyR1MYQvasJMjOGGL2NIebqXWhdyEEA5FL0+3pyfJ0Fp/LMPWRnK0GZq/cw00uBk/VCrPeSW9hMNNONrMnamTX7KjHTDORv0+C5uhTkF67l7Dzk60SSPDUPj3U06eKWpri4J2dHsbwpUwAgrLWmnKmXaGuhodrUPLcWdD3gON8AehyQdF3L8Azgo7u2Ux0ISw95WXzKsy4/5mXxrjidYgt3BeeFp8Mc8OC2mr2NxdtKxbaVxvtt9bd8atf9dPek07BrXsqAmC6BL8GX/z/FgChl2OVPWUvPlYbmiJgQ8yV6h0iIjOgRA6IgwvPwPDwPL8AL8AK8AC/AC/ACvAAvwAvwBJ7AE3gCT+AJPIEn8ASewFN4Ck/hKTyFp/AUnsJTeAovwovwIrwIL8KL8CK8CC/Ci/ASvAQvwUvwErwEL8FL8BK8BC/Dy/AyvAwvw8vwMrwML8PL8Mg5S8gStsRbEiwRS9SSaEmyxGQymUwmk8lkMplMJpPJZDKZTGaT2WQ2mU1mk9nk89Y5Pfh8tVPfvg0d3jM2h3H947Vj/29nV+zFZDdt1937YepOG/d8rWzl/w==","file_map":{"50":{"source":"use poseidon::poseidon2;\nmod merkle_tree;\nfn main(\n    // public inputs\n    root: pub Field,\n    nullifier_hash: pub Field,\n    _receipient: pub Field,\n    // private inputs\n    secret: Field,\n    nullifier: Field,\n    merkle_proofs: [Field; 20],\n    is_even: [bool; 20],\n) {\n    // need to validate the nullifier hash\n    let commitment = poseidon2::Poseidon2::hash([nullifier, secret], 2);\n\n    let nullifier_hash_generated = poseidon2::Poseidon2::hash([nullifier], 1);\n\n    assert(nullifier_hash == nullifier_hash_generated, \"nullifier was wrong\");\n\n    let generated_root = merkle_tree::generate_root(merkle_proofs, is_even, commitment);\n\n    assert(root == generated_root, \"merkle root was wring\")\n}\n","path":"/Users/lakshmi.sanikommu/Desktop/Lucky/zk-mixer/circuits/src/main.nr"},"51":{"source":"use poseidon::poseidon2;\n\npub fn generate_root(merkle_proofs: [Field; 20], is_even: [bool; 20], _commitment: Field) -> Field {\n    let mut currentHash = _commitment;\n\n    for i in 0..20 {\n        let (left, right) = if is_even[i] {\n            (currentHash, merkle_proofs[i])\n        } else {\n            (merkle_proofs[i], currentHash)\n        };\n        currentHash = poseidon2::Poseidon2::hash([left, right], 2)\n    }\n    currentHash\n}\n","path":"/Users/lakshmi.sanikommu/Desktop/Lucky/zk-mixer/circuits/src/merkle_tree.nr"},"58":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/lakshmi.sanikommu/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}